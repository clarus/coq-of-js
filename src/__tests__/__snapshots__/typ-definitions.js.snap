// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`does handle records 1`] = `
"Module Status.
  Record t := {
    message : string;
    quantity : Z;
  }.
End Status.
Definition Status := Status.t."
`;

exports[`does not handle enums with other elements than strings 1`] = `
"> 1 | type SayHi = \\"hi\\" | 'hello' | 12;
    |                              ^^

Only strings are handled in enums"
`;

exports[`does not handle other literals than string 1`] = `
"> 1 | type Boo = false;
    |           ^^^^^

Boolean literals in types are not handled"
`;

exports[`does not handle other literals than string 2`] = `
"> 1 | type Num = 12;
    |           ^^

Number literals in types are not handled"
`;

exports[`does not handle records with spreads 1`] = `
"  2 |       message: string,
  3 |       quantity: number,
> 4 |       ...A,
    |      ^^^^
  5 |     };

Expected named property"
`;

exports[`handles sum types 1`] = `
"Module Status.
  Module Error.
    Record t := {
      message : string;
    }.
  End Error.

  Module Success.
    Record t := {
      fresh : bool;
      value : string;
    }.
  End Success.

  Inductive t :=
  | Error (_ : Error.t)
  | Loading
  | Nothing
  | Success (_ : Success.t).
End Status.
Definition Status := Status.t."
`;

exports[`handles sum types 2`] = `
"Module Status.
  Module Error.
    Record t := {
      message : string;
    }.
  End Error.

  Inductive t :=
  | Error (_ : Error.t).
End Status.
Definition Status := Status.t."
`;

exports[`handles type definition of enums 1`] = `
"Module SayHi.
  Inductive t :=
  | hi
  | hello
  | h.
End SayHi.
Definition SayHi := SayHi.t."
`;

exports[`handles type definition of enums 2`] = `
"Module Single.
  Inductive t :=
  | s.
End Single.
Definition Single := Single.t."
`;

exports[`handles type synonyms of constants 1`] = `
"Definition b : Type := bool.

Definition s : Type := string.

Definition v : Type := unit.

Definition n : Type := unit.

Definition f : Type := Z.

Definition o : Type := unit.

Definition e : Type := Empty_set."
`;

exports[`shows errors for sum types 1`] = `
"  1 | type Status =
> 2 |   | {
    |    ^
> 3 |       message: string,
    | ^^^^^^^^^^^^^^^^^^^^^^
> 4 |     }
    | ^^^^^
  5 |   | {
  6 |       type: \\"Loading\\",
  7 |     };

Expected at least one field with the name \`type\`"
`;

exports[`shows errors for sum types 2`] = `
"  5 |     }
  6 |   | {
> 7 |       type: number,
    |            ^^^^^^
  8 |     };

Expected a string literal"
`;

exports[`shows errors for sum types 3`] = `
"  2 |   | {
  3 |      type: \\"Spread\\",
> 4 |       ...A,
    |      ^^^^
  5 |     };

Expected a named property"
`;

exports[`shows errors for sum types 4`] = `
"  3 |      type: \\"Spread\\",
  4 |     }
> 5 |   | string;
    |    ^^^^^^

Only objects are handled in sum types"
`;

exports[`shows errors for sum types 5`] = `
"> 1 | type Status = number | string;
    |              ^^^^^^^^^^^^^^^

Only handle unions of strings or objects with a \`type\` field"
`;
