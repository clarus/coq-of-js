// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrays does not handle empty elements 1`] = `
"> 1 | const a = [,];
    |          ^^^

Expected non-empty elements in the array"
`;

exports[`arrays does not handle spreads 1`] = `
"> 1 | const a = [...[]];
    |           ^^^^^

Spreads in arrays are not handled"
`;

exports[`arrays handles arrays 1`] = `
"Definition a :=
  [ 12 ]."
`;

exports[`arrays handles empty arrays 1`] = `
"Definition a :=
  []."
`;

exports[`arrow functions handles arrow functions 1`] = `
"Definition f :=
  fun x => x."
`;

exports[`arrow functions handles type annotations 1`] = `
"Definition f :=
  fun {A : Type} (x : A) => x."
`;

exports[`arrow functions requires function parameters to be simple names 1`] = `
"> 1 | const f = ({a}) => {};
    |           ^^^

Expected simple identifier as function parameter"
`;

exports[`binary expressions handles binary expressions 1`] = `
"Definition n :=
  1 + 1."
`;

exports[`enums does not handle enums with an inlined type annotation 1`] = `
"> 1 | const e = (\\"Green\\": \\"Green\\" | \\"Blue\\");
    |                    ^^^^^^^^^^^^^^^^

Expected a type identifier"
`;

exports[`enums handles enums 1`] = `
"Definition e :=
  Kind.Green."
`;

exports[`function calls does not handle spread parameters 1`] = `
"> 1 | const n = f(...a);
    |            ^^^^

Unhandled function argument"
`;

exports[`function calls handles function calls 1`] = `
"Definition y :=
  f x."
`;

exports[`functions handles functions in expressions 1`] = `
"Definition f :=
  fun x => x."
`;

exports[`logical expressions handles logical expressions 1`] = `
"Definition b :=
  true && false."
`;

exports[`nulls handles nulls 1`] = `
"Definition n :=
  tt."
`;

exports[`objects as records does not handle non-empty objects without annotations 1`] = `
"> 1 | const o = {x: 12};
    |          ^^^^^^^

Unhandled object expression without type annotation"
`;

exports[`objects as records does not handle records with computed property names 1`] = `
"> 1 | const o = ({[a]: \\"hi\\"}: Rec);
    |             ^

Unhandled computed property name"
`;

exports[`objects as records does not handle records with methods 1`] = `
"> 1 | const o = ({foo() {}}: Rec);
    |            ^^^^^^^^

Expected a named property"
`;

exports[`objects as records does not handle records with numeric names 1`] = `
"> 1 | const o = ({12: \\"hi\\"}: Rec);
    |            ^^^^^^^^

Expected a plain string as identifier"
`;

exports[`objects as records does not handle records with spreads 1`] = `
"> 1 | const o = ({...rec}: Rec);
    |            ^^^^^^

Expected a named property"
`;

exports[`objects as records handles empty objects 1`] = `
"Definition o :=
  tt."
`;

exports[`objects as records handles record instances 1`] = `
"Definition o :=
  {| Rec.a := \\"hi\\"; Rec.b := 12; |}."
`;

exports[`objects as sum types expects the \`type\` field to be a literal strings 1`] = `
"> 1 | const o = ({type: 12}: Status);
    |                  ^^

Expected a string literal"
`;

exports[`objects as sum types handles sum types 1`] = `
"Definition o :=
  Status.Foo {| Status.Foo.a := 12; |}."
`;

exports[`objects as sum types handles sum types without parameters 1`] = `
"Definition o :=
  Status.Foo."
`;

exports[`ternary expressions handles ternary expressions 1`] = `
"Definition n :=
  if true then 12 else 0."
`;

exports[`type casts handles type casts 1`] = `
"Definition b :=
  (true : bool)."
`;

exports[`unary expressions handles unary expressions 1`] = `
"Definition n :=
  + 0."
`;
